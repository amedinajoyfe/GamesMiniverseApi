package joyfe.joyfeSpring.apiController;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import joyfe.joyfeSpring.services.UsersService;

@Tag(name = "Tareas 1", description = "Documentacion de la api")
@RestController
@RequestMapping("/${api-version}/${apiName}")
@CrossOrigin(origins = "*", allowedHeaders = {"POST", "GET", "PUT"})

public class apiController {
	@Autowired
	UsersService usersService;
//	
//	@Operation(summary = "Guardar tarea", description = "Este endpoint te permite guardar una tarea")
//	@ApiResponses(value = {
//			@ApiResponse(responseCode = "201", description = "Tarea creada correctamente"),
//			@ApiResponse(responseCode = "400", description = "Error inesperado"),
//			@ApiResponse(responseCode = "404", description = "Asignatura no encontrada")
//	})
//	@PostMapping(path = "/${taskEndpoint}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Task> addTask(@RequestBody @Valid Task newTask) throws URISyntaxException {
//		return subjectService.addTask(newTask) ?  ResponseEntity.created(new URI("/tasks/" + newTask.getId())).body(newTask) : ResponseEntity.notFound().build();
//	}
//	
//	@Operation(summary = "Recibir tarea", description = "Este endpoint te permite obtener la tarea cuyo Id sea introducido")
//	@ApiResponses(value = {
//			@ApiResponse(responseCode = "200", description = "Tarea encontrada"),
//			@ApiResponse(responseCode = "400", description = "Error inesperado"),
//			@ApiResponse(responseCode = "404", description = "Tarea no encontrada")
//	})
//	@GetMapping(path = "/${taskEndpoint}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Task> getTaskById(@PathVariable long id) {
//		Task result = subjectService.getTaskById(id);
//		return result == null ? ResponseEntity.notFound().build() : ResponseEntity.ok(subjectService.getTaskById(id));
//	}
//	
//	@Operation(summary = "Actualizar tarea", description = "Este endpoint te permite actualizar la informaci√≥n de una tarea")
//	@ApiResponses(value = {
//			@ApiResponse(responseCode = "201", description = "Tarea modificada correctamente"),
//			@ApiResponse(responseCode = "400", description = "Error inesperado"),
//			@ApiResponse(responseCode = "404", description = "Tarea no encontrada")
//	})
//	@PutMapping(path = "/${taskEndpoint}/{id}", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Task> updateTask(@PathVariable long id, @RequestBody @Valid Task newTask) throws URISyntaxException {
//		return subjectService.updateTask(id, newTask) ? ResponseEntity.created(new URI("/tasks/" + id)).body(newTask) : ResponseEntity.notFound().build();
//	}
//	
//	@Operation(summary = "Borrar tarea", description = "Este endpoint te permite eliminar una tarea")
//	@ApiResponses(value = {
//			@ApiResponse(responseCode = "200", description = "Tarea eliminada correctamente"),
//			@ApiResponse(responseCode = "400", description = "Error inesperado"),
//			@ApiResponse(responseCode = "404", description = "Tarea no encontrada")
//	})
//	@DeleteMapping(path = "/${taskEndpoint}/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
//	public ResponseEntity<Task> deleteTask(@PathVariable long id) {
//		return subjectService.deleteTask(id) ? ResponseEntity.ok().build() : ResponseEntity.notFound().build();
//	}
}